name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
  OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
  OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
  OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
  OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG_CONTENT }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install OCI CLI
        run: |
          mkdir -p ~/.oci
          echo "$OCI_CLI_KEY_CONTENT" > ~/.oci/oci_api_key.pem
          echo "[DEFAULT]" > ~/.oci/config
          echo "user=$OCI_CLI_USER" >> ~/.oci/config
          echo "fingerprint=$OCI_CLI_FINGERPRINT" >> ~/.oci/config
          echo "tenancy=$OCI_CLI_TENANCY" >> ~/.oci/config
          echo "region=$OCI_CLI_REGION" >> ~/.oci/config
          echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
          pip install oci-cli
          
      - name: Build backend and frontend
        run: |
          cd MtdrSpring/backend
          mvn clean package -Dmaven.frontend.skip=false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to OCI Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.OCI_CLI_USER }}
          password: ${{ env.OCI_CLI_FINGERPRINT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: MtdrSpring/backend
          file: MtdrSpring/backend/Dockerfile.multi
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/dashmaster:latest,${{ env.DOCKER_REGISTRY }}/dashmaster:${{ github.sha }}
          
      - name: Set up kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_CONTENT" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          
      - name: Create or update Oracle Wallet secret
        run: MtdrSpring/k8s/create-wallet-secret.sh
          
      - name: Update Kubernetes configuration
        run: |
          sed -i "s|\${DOCKER_REGISTRY}|$DOCKER_REGISTRY|g" MtdrSpring/k8s/dashmaster-deployment.yaml
          kubectl apply -f MtdrSpring/k8s/db-secrets.yaml
          kubectl apply -f MtdrSpring/k8s/app-config.yaml
          kubectl apply -f MtdrSpring/k8s/dashmaster-deployment.yaml
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/dashmaster
          echo "External IP:"
          kubectl get service dashmaster-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
