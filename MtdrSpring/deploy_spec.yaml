version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash

env:
  variables:
    # Configuración del registro Docker
    DOCKER_REGISTRY: "${OCI_RESOURCE_PRINCIPAL_REGION}.ocir.io"
    
    # Información del repositorio
    BACKEND_REPO: "dashmaster-backend" 
    FRONTEND_REPO: "dashmaster-frontend"
    
  exportedVariables:
    - BACKEND_IMAGE_TAG
    - FRONTEND_IMAGE_TAG

steps:
  # Paso 1: Debug - Verificar estructura del repositorio
  - type: Command
    name: "Debug repository structure"
    timeoutInSeconds: 60
    command: |
      echo "=== Repository Structure Debug ==="
      echo "Current directory: $(pwd)"
      echo "Directory contents:"
      ls -la
      echo "MtdrSpring directory:"
      ls -la MtdrSpring/
      echo "Backend directory:"
      ls -la MtdrSpring/backend/
      echo "Frontend directory:"
      ls -la MtdrSpring/frontend/
      echo "Checking for key files:"
      echo "- Backend Dockerfile: $(ls -la MtdrSpring/backend/Dockerfile 2>/dev/null || echo 'NOT FOUND')"
      echo "- Backend pom.xml: $(ls -la MtdrSpring/backend/pom.xml 2>/dev/null || echo 'NOT FOUND')"
      echo "- Backend .mvn: $(ls -la MtdrSpring/backend/.mvn 2>/dev/null || echo 'NOT FOUND')"
      echo "- Frontend Dockerfile: $(ls -la MtdrSpring/frontend/Dockerfile 2>/dev/null || echo 'NOT FOUND')"
      echo "- Frontend package.json: $(ls -la MtdrSpring/frontend/package.json 2>/dev/null || echo 'NOT FOUND')"
      echo "=================================="

  # Paso 2: Obtener información del tenancy y región
  - type: Command
    name: "Get tenancy and region info"
    timeoutInSeconds: 60
    command: |
      # Obtener el namespace del tenancy
      export TENANCY_NAMESPACE=$(oci os ns get --query "data" --raw-output)
      echo "Tenancy namespace: ${TENANCY_NAMESPACE}"
      
      # Obtener la región actual de manera explícita
      export CURRENT_REGION=$(oci iam region-subscription list --query "data[?\"is-home-region\"==\`false\`].\"region-name\" | [0]" --raw-output 2>/dev/null || echo "mx-queretaro-1")
      if [ -z "$CURRENT_REGION" ] || [ "$CURRENT_REGION" = "null" ]; then
        # Fallback: intentar obtener de otra manera
        export CURRENT_REGION=$(oci os bucket list --compartment-id $(oci iam compartment list --query "data[0].id" --raw-output) --query "data[0].namespace" --raw-output 2>/dev/null | cut -d'.' -f2 2>/dev/null || echo "mx-queretaro-1")
      fi
      if [ -z "$CURRENT_REGION" ] || [ "$CURRENT_REGION" = "null" ]; then
        # Segundo fallback: usar la región que sabemos que funciona basada en tus logs
        export CURRENT_REGION="mx-queretaro-1"
      fi
      echo "Current region: ${CURRENT_REGION}"
      
      # Verificar información del build run para debug
      echo "Build run ID: ${OCI_BUILD_RUN_ID}"
      echo "Primary source dir: ${OCI_PRIMARY_SOURCE_DIR}"

  # Paso 3: Construir imagen de Backend con contexto correcto
  - type: Command
    name: "Build backend image"
    timeoutInSeconds: 1800
    command: |
      echo "=== Starting Backend Image Build ==="
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Verificar que existe el directorio del backend
      if [ ! -d "MtdrSpring/backend" ]; then
        echo "ERROR: Backend directory 'MtdrSpring/backend' not found"
        exit 1
      fi
      
      # Verificar archivos críticos del backend
      if [ ! -f "MtdrSpring/backend/Dockerfile" ]; then
        echo "ERROR: Backend Dockerfile not found"
        exit 1
      fi
      
      if [ ! -f "MtdrSpring/backend/pom.xml" ]; then
        echo "ERROR: Backend pom.xml not found"
        exit 1
      fi
      
      # Obtener información necesaria para el tag de la imagen
      export TENANCY_NAMESPACE=$(oci os ns get --query "data" --raw-output)
      
      # Resolver la región de manera explícita
      export CURRENT_REGION=$(oci iam region-subscription list --query "data[?\"is-home-region\"==\`false\`].\"region-name\" | [0]" --raw-output 2>/dev/null || echo "mx-queretaro-1")
      if [ -z "$CURRENT_REGION" ] || [ "$CURRENT_REGION" = "null" ]; then
        export CURRENT_REGION="mx-queretaro-1"  # Usar la región conocida como fallback
      fi
      
      # Generar tag único para la imagen de backend con región resuelta
      export BACKEND_IMAGE_TAG="${CURRENT_REGION}.ocir.io/${TENANCY_NAMESPACE}/dashmaster-backend:${OCI_BUILD_RUN_ID}"
      echo "Backend image tag: ${BACKEND_IMAGE_TAG}"
      
      # IMPORTANTE: Cambiar al directorio del backend antes de construir
      # Esto hace que el contexto de Docker sea correcto para el Dockerfile
      cd MtdrSpring/backend
      
      echo "=== Current working directory for backend build ==="
      pwd
      echo "Contents of current directory:"
      ls -la
      echo "=============================================="
      
      # Construir la imagen usando el contexto local (.)
      # El Dockerfile está en el directorio actual, y el contexto también
      echo "Building backend image..."
      docker build -t ${BACKEND_IMAGE_TAG} .
      
      # Regresar al directorio raíz
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Verificar que la imagen se construyó correctamente
      docker images | grep dashmaster-backend
      echo "Backend image built successfully: ${BACKEND_IMAGE_TAG}"

  # Paso 4: Construir imagen de Frontend
  - type: Command
    name: "Build frontend image"
    timeoutInSeconds: 1800
    command: |
      echo "=== Starting Frontend Image Build ==="
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Verificar que existe el directorio del frontend
      if [ ! -d "MtdrSpring/frontend" ]; then
        echo "ERROR: Frontend directory 'MtdrSpring/frontend' not found"
        exit 1
      fi
      
      # Verificar archivos críticos del frontend
      if [ ! -f "MtdrSpring/frontend/Dockerfile" ]; then
        echo "ERROR: Frontend Dockerfile not found"
        exit 1
      fi
      
      if [ ! -f "MtdrSpring/frontend/package.json" ]; then
        echo "ERROR: Frontend package.json not found"
        exit 1
      fi
      
      # Obtener información necesaria para el tag de la imagen
      export TENANCY_NAMESPACE=$(oci os ns get --query "data" --raw-output)
      
      # Resolver la región de manera explícita (igual que en backend)
      export CURRENT_REGION=$(oci iam region-subscription list --query "data[?\"is-home-region\"==\`false\`].\"region-name\" | [0]" --raw-output 2>/dev/null || echo "mx-queretaro-1")
      if [ -z "$CURRENT_REGION" ] || [ "$CURRENT_REGION" = "null" ]; then
        export CURRENT_REGION="mx-queretaro-1"  # Usar la región conocida como fallback
      fi
      
      # Generar tag único para la imagen de frontend con región resuelta
      export FRONTEND_IMAGE_TAG="${CURRENT_REGION}.ocir.io/${TENANCY_NAMESPACE}/dashmaster-frontend:${OCI_BUILD_RUN_ID}"
      echo "Frontend image tag: ${FRONTEND_IMAGE_TAG}"
      
      # IMPORTANTE: Cambiar al directorio del frontend antes de construir
      cd MtdrSpring/frontend
      
      echo "=== Current working directory for frontend build ==="
      pwd
      echo "Contents of current directory:"
      ls -la
      echo "=============================================="
      
      # Construir la imagen usando el contexto local (.)
      echo "Building frontend image..."
      docker build -t ${FRONTEND_IMAGE_TAG} .
      
      # Regresar al directorio raíz
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Verificar que la imagen se construyó correctamente
      docker images | grep dashmaster-frontend
      echo "Frontend image built successfully: ${FRONTEND_IMAGE_TAG}"

  # Paso 5: Hacer login a OCIR
  - type: Command
    name: "Login to OCIR"
    timeoutInSeconds: 300
    command: |
      echo "Logging into OCIR..."
      
      # Obtener información necesaria para el login
      export TENANCY_NAMESPACE=$(oci os ns get --query "data" --raw-output)
      
      # Resolver la región de manera explícita
      export CURRENT_REGION=$(oci iam region-subscription list --query "data[?\"is-home-region\"==\`false\`].\"region-name\" | [0]" --raw-output 2>/dev/null || echo "mx-queretaro-1")
      if [ -z "$CURRENT_REGION" ] || [ "$CURRENT_REGION" = "null" ]; then
        export CURRENT_REGION="mx-queretaro-1"
      fi
      
      export DOCKER_REGISTRY="${CURRENT_REGION}.ocir.io"
      echo "Docker registry: ${DOCKER_REGISTRY}"
      echo "Tenancy namespace: ${TENANCY_NAMESPACE}"
      
      # Login a OCIR usando la región resuelta
      echo ${OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM} | docker login ${DOCKER_REGISTRY} --username ${TENANCY_NAMESPACE}/oracleidentitycloudservice/${OCI_PRINCIPAL_ID} --password-stdin
      
      echo "Successfully logged into OCIR"

  # Paso 6: Push backend image
  - type: Command
    name: "Push backend image"
    timeoutInSeconds: 1200
    command: |
      echo "Pushing backend image to OCIR..."
      
      # Reconstruir el tag de la imagen de backend (debe coincidir exactamente con el del build)
      export TENANCY_NAMESPACE=$(oci os ns get --query "data" --raw-output)
      export CURRENT_REGION=$(oci iam region-subscription list --query "data[?\"is-home-region\"==\`false\`].\"region-name\" | [0]" --raw-output 2>/dev/null || echo "mx-queretaro-1")
      if [ -z "$CURRENT_REGION" ] || [ "$CURRENT_REGION" = "null" ]; then
        export CURRENT_REGION="mx-queretaro-1"
      fi
      export BACKEND_IMAGE_TAG="${CURRENT_REGION}.ocir.io/${TENANCY_NAMESPACE}/dashmaster-backend:${OCI_BUILD_RUN_ID}"
      
      echo "Pushing backend image: ${BACKEND_IMAGE_TAG}"
      
      # Verificar que la imagen existe localmente antes de hacer push
      if docker images ${BACKEND_IMAGE_TAG} | grep -q dashmaster-backend; then
        docker push ${BACKEND_IMAGE_TAG}
        echo "Backend image pushed successfully: ${BACKEND_IMAGE_TAG}"
      else
        echo "ERROR: Backend image ${BACKEND_IMAGE_TAG} not found locally"
        echo "Available images:"
        docker images | grep dashmaster-backend || echo "No dashmaster-backend images found"
        exit 1
      fi

  # Paso 7: Push frontend image
  - type: Command
    name: "Push frontend image"
    timeoutInSeconds: 1200
    command: |
      echo "Pushing frontend image to OCIR..."
      
      # Reconstruir el tag de la imagen de frontend (debe coincidir exactamente con el del build)
      export TENANCY_NAMESPACE=$(oci os ns get --query "data" --raw-output)
      export CURRENT_REGION=$(oci iam region-subscription list --query "data[?\"is-home-region\"==\`false\`].\"region-name\" | [0]" --raw-output 2>/dev/null || echo "mx-queretaro-1")
      if [ -z "$CURRENT_REGION" ] || [ "$CURRENT_REGION" = "null" ]; then
        export CURRENT_REGION="mx-queretaro-1"
      fi
      export FRONTEND_IMAGE_TAG="${CURRENT_REGION}.ocir.io/${TENANCY_NAMESPACE}/dashmaster-frontend:${OCI_BUILD_RUN_ID}"
      
      echo "Pushing frontend image: ${FRONTEND_IMAGE_TAG}"
      
      # Verificar que la imagen existe localmente antes de hacer push
      if docker images ${FRONTEND_IMAGE_TAG} | grep -q dashmaster-frontend; then
        docker push ${FRONTEND_IMAGE_TAG}
        echo "Frontend image pushed successfully: ${FRONTEND_IMAGE_TAG}"
      else
        echo "ERROR: Frontend image ${FRONTEND_IMAGE_TAG} not found locally"
        echo "Available images:"
        docker images | grep dashmaster-frontend || echo "No dashmaster-frontend images found"
        exit 1
      fi

  # Paso 8: Preparar deployment manifest
  - type: Command
    name: "Prepare deployment manifest"
    timeoutInSeconds: 300
    command: |
      echo "Preparing deployment manifest..."
      
      # Verificar que deployment.yaml existe en la raíz del repositorio
      if [ ! -f "deployment.yaml" ]; then
        echo "ERROR: deployment.yaml not found in repository root"
        echo "Please ensure deployment.yaml exists in the root of your repository"
        echo "Available files in root directory:"
        ls -la *.yaml *.yml 2>/dev/null || echo "No YAML files found"
        exit 1
      fi
      
      echo "Found deployment.yaml in repository root"
      
      # Verificar que el archivo tiene contenido válido
      if [ ! -s "deployment.yaml" ]; then
        echo "ERROR: deployment.yaml is empty"
        exit 1
      fi
      
      # Mostrar información sobre el archivo
      echo "Deployment manifest file info:"
      echo "- Size: $(wc -l < deployment.yaml) lines"
      echo "- First few lines:"
      head -10 deployment.yaml
      
      # Copiar deployment.yaml para output (esto es lo que usa el deployment pipeline)
      cp deployment.yaml ${OCI_WORKSPACE_DIR}/deployment.yaml
      
      echo "Deployment manifest prepared successfully and copied to workspace"

  # Paso 9: Verificar imágenes construidas
  - type: Command
    name: "Verify built images"
    timeoutInSeconds: 300
    command: |
      echo "=== Verifying Built Images ==="
      
      # Reconstruir las variables para verificación (usando la misma lógica que en los builds)
      export TENANCY_NAMESPACE=$(oci os ns get --query "data" --raw-output)
      export CURRENT_REGION=$(oci iam region-subscription list --query "data[?\"is-home-region\"==\`false\`].\"region-name\" | [0]" --raw-output 2>/dev/null || echo "mx-queretaro-1")
      if [ -z "$CURRENT_REGION" ] || [ "$CURRENT_REGION" = "null" ]; then
        export CURRENT_REGION="mx-queretaro-1"
      fi
      
      export BACKEND_IMAGE_TAG="${CURRENT_REGION}.ocir.io/${TENANCY_NAMESPACE}/dashmaster-backend:${OCI_BUILD_RUN_ID}"
      export FRONTEND_IMAGE_TAG="${CURRENT_REGION}.ocir.io/${TENANCY_NAMESPACE}/dashmaster-frontend:${OCI_BUILD_RUN_ID}"
      
      echo "All Docker images:"
      docker images
      
      echo "Backend image details:"
      docker images | grep dashmaster-backend || echo "Backend image not found!"
      
      echo "Frontend image details:"
      docker images | grep dashmaster-frontend || echo "Frontend image not found!"
      
      # Verificar que las variables están exportadas correctamente
      echo "Exported variables:"
      echo "BACKEND_IMAGE_TAG: ${BACKEND_IMAGE_TAG}"
      echo "FRONTEND_IMAGE_TAG: ${FRONTEND_IMAGE_TAG}"
      echo "CURRENT_REGION: ${CURRENT_REGION}"
      echo "TENANCY_NAMESPACE: ${TENANCY_NAMESPACE}"
      
      # Verificar que las imágenes fueron construidas con los tags correctos
      if docker images | grep -q "${CURRENT_REGION}.ocir.io/${TENANCY_NAMESPACE}/dashmaster-backend"; then
        echo "✅ Backend image found with correct tag"
      else
        echo "❌ Backend image NOT found with expected tag"
      fi
      
      if docker images | grep -q "${CURRENT_REGION}.ocir.io/${TENANCY_NAMESPACE}/dashmaster-frontend"; then
        echo "✅ Frontend image found with correct tag"
      else
        echo "❌ Frontend image NOT found with expected tag"
      fi
      
      echo "Build process completed successfully!"

outputArtifacts:
  # Definir los artefactos de salida que serán utilizados en el deployment
  # IMPORTANTE: Estos tags deben coincidir EXACTAMENTE con los usados en los pasos de build
  - name: backend_image
    type: DOCKER_IMAGE
    location: mx-queretaro-1.ocir.io/ax6xpbwtbt9g/dashmaster-backend:${OCI_BUILD_RUN_ID}
    
  - name: frontend_image  
    type: DOCKER_IMAGE
    location: mx-queretaro-1.ocir.io/ax6xpbwtbt9g/dashmaster-frontend:${OCI_BUILD_RUN_ID}
    
  - name: deployment_artifacts
    type: BINARY
    location: deployment.yaml