version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash

env:
  variables:
    # Información del repositorio
    BACKEND_REPO: "dashmaster-backend" 
    FRONTEND_REPO: "dashmaster-frontend"
    
  exportedVariables:
    - TENANCY_NAMESPACE
    - CURRENT_REGION
    - DOCKER_REGISTRY
    - BACKEND_IMAGE_TAG
    - FRONTEND_IMAGE_TAG

steps:
  # Paso 1: Debug - Verificar estructura del repositorio
  - type: Command
    name: "Debug repository structure"
    timeoutInSeconds: 60
    command: |
      echo "=== Repository Structure Debug ==="
      echo "Current directory: $(pwd)"
      echo "Directory contents:"
      ls -la
      echo "MtdrSpring directory:"
      ls -la MtdrSpring/
      echo "Backend directory:"
      ls -la MtdrSpring/backend/
      echo "Frontend directory:"
      ls -la MtdrSpring/frontend/
      echo "Checking for key files:"
      echo "- Backend Dockerfile: $(ls -la MtdrSpring/backend/Dockerfile 2>/dev/null || echo 'NOT FOUND')"
      echo "- Backend pom.xml: $(ls -la MtdrSpring/backend/pom.xml 2>/dev/null || echo 'NOT FOUND')"
      echo "- Backend .mvn: $(ls -la MtdrSpring/backend/.mvn 2>/dev/null || echo 'NOT FOUND')"
      echo "- Frontend Dockerfile: $(ls -la MtdrSpring/frontend/Dockerfile 2>/dev/null || echo 'NOT FOUND')"
      echo "- Frontend package.json: $(ls -la MtdrSpring/frontend/package.json 2>/dev/null || echo 'NOT FOUND')"
      echo "=================================="

  # Paso 2: Establecer variables globales para todo el pipeline
  - type: Command
    name: "Setup global variables"
    timeoutInSeconds: 120
    command: |
      echo "=== Estableciendo variables globales para el pipeline ==="
      
      # Obtener el namespace del tenancy (esto siempre funciona)
      export TENANCY_NAMESPACE=$(oci os ns get --query "data" --raw-output)
      echo "Tenancy namespace: ${TENANCY_NAMESPACE}"
      
      # Obtener la región actual usando múltiples métodos de fallback
      echo "Resolviendo la región actual..."
      
      # Método 1: Intentar obtener de region subscriptions
      export CURRENT_REGION=$(oci iam region-subscription list --query "data[?\"is-home-region\"==\`false\`].\"region-name\" | [0]" --raw-output 2>/dev/null)
      
      # Si el primer método no funciona, intentar otros métodos
      if [ -z "$CURRENT_REGION" ] || [ "$CURRENT_REGION" = "null" ]; then
        echo "Método 1 fallido, intentando método 2..."
        # Método 2: Obtener de la configuración de OCI
        export CURRENT_REGION=$(oci iam region list --query "data[0].\"region-name\"" --raw-output 2>/dev/null)
      fi
      
      if [ -z "$CURRENT_REGION" ] || [ "$CURRENT_REGION" = "null" ]; then
        echo "Método 2 fallido, intentando método 3..."
        # Método 3: Parsear desde el build run ID que sabemos contiene la región
        export CURRENT_REGION=$(echo "${OCI_BUILD_RUN_ID}" | grep -o 'mx-queretaro-1\|us-ashburn-1\|us-phoenix-1' | head -1)
      fi
      
      # Si todos los métodos fallan, usar el valor conocido como último recurso
      if [ -z "$CURRENT_REGION" ] || [ "$CURRENT_REGION" = "null" ]; then
        echo "Todos los métodos fallaron, usando región conocida como fallback"
        export CURRENT_REGION="mx-queretaro-1"
      fi
      
      echo "Región resuelta: ${CURRENT_REGION}"
      
      # Establecer el registro de Docker usando la región resuelta
      export DOCKER_REGISTRY="${CURRENT_REGION}.ocir.io"
      echo "Docker registry: ${DOCKER_REGISTRY}"
      
      # Generar los tags completos de las imágenes que se usarán en todo el pipeline
      export BACKEND_IMAGE_TAG="${DOCKER_REGISTRY}/${TENANCY_NAMESPACE}/${BACKEND_REPO}:${OCI_BUILD_RUN_ID}"
      export FRONTEND_IMAGE_TAG="${DOCKER_REGISTRY}/${TENANCY_NAMESPACE}/${FRONTEND_REPO}:${OCI_BUILD_RUN_ID}"
      
      echo "Tags de imágenes generados:"
      echo "Backend: ${BACKEND_IMAGE_TAG}"
      echo "Frontend: ${FRONTEND_IMAGE_TAG}"
      
      # Verificar información del build run para debug
      echo "Build run ID: ${OCI_BUILD_RUN_ID}"
      echo "Primary source dir: ${OCI_PRIMARY_SOURCE_DIR}"
      
      echo "=== Variables globales establecidas exitosamente ==="

  # Paso 3: Construir imagen de Backend usando variables globales
  - type: Command
    name: "Build backend image"
    timeoutInSeconds: 1800
    command: |
      echo "=== Starting Backend Image Build ==="
      echo "Usando variables globales ya establecidas:"
      echo "BACKEND_IMAGE_TAG: ${BACKEND_IMAGE_TAG}"
      echo "DOCKER_REGISTRY: ${DOCKER_REGISTRY}"
      echo "TENANCY_NAMESPACE: ${TENANCY_NAMESPACE}"
      
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Verificar que existe el directorio del backend
      if [ ! -d "MtdrSpring/backend" ]; then
        echo "ERROR: Backend directory 'MtdrSpring/backend' not found"
        exit 1
      fi
      
      # Verificar archivos críticos del backend
      if [ ! -f "MtdrSpring/backend/Dockerfile" ]; then
        echo "ERROR: Backend Dockerfile not found"
        exit 1
      fi
      
      if [ ! -f "MtdrSpring/backend/pom.xml" ]; then
        echo "ERROR: Backend pom.xml not found"
        exit 1
      fi
      
      # Cambiar al directorio del backend para construcción
      cd MtdrSpring/backend
      
      echo "=== Current working directory for backend build ==="
      pwd
      echo "Contents of current directory:"
      ls -la
      echo "=============================================="
      
      # Construir la imagen usando el tag global ya establecido
      echo "Building backend image with tag: ${BACKEND_IMAGE_TAG}"
      docker build -t ${BACKEND_IMAGE_TAG} .
      
      # Regresar al directorio raíz
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Verificar que la imagen se construyó correctamente
      echo "Verificando imagen construida:"
      docker images | grep dashmaster-backend
      echo "Backend image built successfully: ${BACKEND_IMAGE_TAG}"

  # Paso 4: Construir imagen de Frontend usando variables globales
  - type: Command
    name: "Build frontend image"
    timeoutInSeconds: 1800
    command: |
      echo "=== Starting Frontend Image Build ==="
      echo "Usando variables globales ya establecidas:"
      echo "FRONTEND_IMAGE_TAG: ${FRONTEND_IMAGE_TAG}"
      echo "DOCKER_REGISTRY: ${DOCKER_REGISTRY}"
      echo "TENANCY_NAMESPACE: ${TENANCY_NAMESPACE}"
      
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Verificar que existe el directorio del frontend
      if [ ! -d "MtdrSpring/frontend" ]; then
        echo "ERROR: Frontend directory 'MtdrSpring/frontend' not found"
        exit 1
      fi
      
      # Verificar archivos críticos del frontend
      if [ ! -f "MtdrSpring/frontend/Dockerfile" ]; then
        echo "ERROR: Frontend Dockerfile not found"
        exit 1
      fi
      
      if [ ! -f "MtdrSpring/frontend/package.json" ]; then
        echo "ERROR: Frontend package.json not found"
        exit 1
      fi
      
      # Cambiar al directorio del frontend para construcción
      cd MtdrSpring/frontend
      
      echo "=== Current working directory for frontend build ==="
      pwd
      echo "Contents of current directory:"
      ls -la
      echo "=============================================="
      
      # Construir la imagen usando el tag global ya establecido
      echo "Building frontend image with tag: ${FRONTEND_IMAGE_TAG}"
      docker build -t ${FRONTEND_IMAGE_TAG} .
      
      # Regresar al directorio raíz
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Verificar que la imagen se construyó correctamente
      echo "Verificando imagen construida:"
      docker images | grep dashmaster-frontend
      echo "Frontend image built successfully: ${FRONTEND_IMAGE_TAG}"

  # Paso 5: Hacer login a OCIR usando variables globales
  - type: Command
    name: "Login to OCIR"
    timeoutInSeconds: 300
    command: |
      echo "Logging into OCIR..."
      echo "Docker registry: ${DOCKER_REGISTRY}"
      echo "Tenancy namespace: ${TENANCY_NAMESPACE}"
      
      # Login a OCIR usando las variables globales ya establecidas
      echo ${OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM} | docker login ${DOCKER_REGISTRY} --username ${TENANCY_NAMESPACE}/oracleidentitycloudservice/${OCI_PRINCIPAL_ID} --password-stdin
      
      echo "Successfully logged into OCIR"

  # Paso 6: Push backend image usando variables globales
  - type: Command
    name: "Push backend image"
    timeoutInSeconds: 1200
    command: |
      echo "Pushing backend image to OCIR..."
      echo "Backend image tag: ${BACKEND_IMAGE_TAG}"
      
      # Verificar que la imagen existe localmente antes de hacer push
      if docker images ${BACKEND_IMAGE_TAG} | grep -q dashmaster-backend; then
        docker push ${BACKEND_IMAGE_TAG}
        echo "Backend image pushed successfully: ${BACKEND_IMAGE_TAG}"
      else
        echo "ERROR: Backend image ${BACKEND_IMAGE_TAG} not found locally"
        echo "Available images:"
        docker images | grep dashmaster-backend || echo "No dashmaster-backend images found"
        exit 1
      fi

  # Paso 7: Push frontend image usando variables globales
  - type: Command
    name: "Push frontend image"
    timeoutInSeconds: 1200
    command: |
      echo "Pushing frontend image to OCIR..."
      echo "Frontend image tag: ${FRONTEND_IMAGE_TAG}"
      
      # Verificar que la imagen existe localmente antes de hacer push
      if docker images ${FRONTEND_IMAGE_TAG} | grep -q dashmaster-frontend; then
        docker push ${FRONTEND_IMAGE_TAG}
        echo "Frontend image pushed successfully: ${FRONTEND_IMAGE_TAG}"
      else
        echo "ERROR: Frontend image ${FRONTEND_IMAGE_TAG} not found locally"
        echo "Available images:"
        docker images | grep dashmaster-frontend || echo "No dashmaster-frontend images found"
        exit 1
      fi

  # Paso 8: Preparar deployment manifest
  - type: Command
    name: "Prepare deployment manifest"
    timeoutInSeconds: 300
    command: |
      echo "Preparing deployment manifest..."
      
      # Verificar que deployment.yaml existe en la raíz del repositorio
      if [ ! -f "deployment.yaml" ]; then
        echo "ERROR: deployment.yaml not found in repository root"
        echo "Please ensure deployment.yaml exists in the root of your repository"
        echo "Available files in root directory:"
        ls -la *.yaml *.yml 2>/dev/null || echo "No YAML files found"
        exit 1
      fi
      
      echo "Found deployment.yaml in repository root"
      
      # Verificar que el archivo tiene contenido válido
      if [ ! -s "deployment.yaml" ]; then
        echo "ERROR: deployment.yaml is empty"
        exit 1
      fi
      
      # Mostrar información sobre el archivo
      echo "Deployment manifest file info:"
      echo "- Size: $(wc -l < deployment.yaml) lines"
      echo "- First few lines:"
      head -10 deployment.yaml
      
      # Copiar deployment.yaml para output (esto es lo que usa el deployment pipeline)
      cp deployment.yaml ${OCI_WORKSPACE_DIR}/deployment.yaml
      
      echo "Deployment manifest prepared successfully and copied to workspace"

  # Paso 9: Verificar imágenes construidas usando variables globales
  - type: Command
    name: "Verify built images"
    timeoutInSeconds: 300
    command: |
      echo "=== Verifying Built Images ==="
      echo "Usando variables globales ya establecidas:"
      echo "TENANCY_NAMESPACE: ${TENANCY_NAMESPACE}"
      echo "CURRENT_REGION: ${CURRENT_REGION}"
      echo "DOCKER_REGISTRY: ${DOCKER_REGISTRY}"
      echo "BACKEND_IMAGE_TAG: ${BACKEND_IMAGE_TAG}"
      echo "FRONTEND_IMAGE_TAG: ${FRONTEND_IMAGE_TAG}"
      
      echo "All Docker images:"
      docker images
      
      echo "Backend image details:"
      docker images | grep dashmaster-backend || echo "Backend image not found!"
      
      echo "Frontend image details:"
      docker images | grep dashmaster-frontend || echo "Frontend image not found!"
      
      # Verificar que las imágenes fueron construidas con los tags correctos
      if docker images | grep -q "${CURRENT_REGION}.ocir.io/${TENANCY_NAMESPACE}/dashmaster-backend"; then
        echo "✅ Backend image found with correct tag"
      else
        echo "❌ Backend image NOT found with expected tag"
        echo "Expected pattern: ${CURRENT_REGION}.ocir.io/${TENANCY_NAMESPACE}/dashmaster-backend"
      fi
      
      if docker images | grep -q "${CURRENT_REGION}.ocir.io/${TENANCY_NAMESPACE}/dashmaster-frontend"; then
        echo "✅ Frontend image found with correct tag"
      else
        echo "❌ Frontend image NOT found with expected tag"
        echo "Expected pattern: ${CURRENT_REGION}.ocir.io/${TENANCY_NAMESPACE}/dashmaster-frontend"
      fi
      
      echo "Build process completed successfully!"

outputArtifacts:
  - name: backend_image
    type: DOCKER_IMAGE
    location: ${BACKEND_IMAGE_TAG}
  - name: frontend_image  
    type: DOCKER_IMAGE
    location: ${FRONTEND_IMAGE_TAG}
  - name: deployment_artifacts
    type: BINARY
    location: deployment.yaml