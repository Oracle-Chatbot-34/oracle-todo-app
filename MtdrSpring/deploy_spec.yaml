version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash

env:
  variables:
    # Valores conocidos que funcionan basados en tus logs
    TENANCY_NAMESPACE: "ax6xpbwtbt9g"
    CURRENT_REGION: "mx-queretaro-1"
    DOCKER_REGISTRY: "mx-queretaro-1.ocir.io"
    BACKEND_REPO: "dashmaster-backend"
    FRONTEND_REPO: "dashmaster-frontend"
    
  exportedVariables:
    - BACKEND_IMAGE_TAG
    - FRONTEND_IMAGE_TAG

steps:
  # Paso 1: Debug - Verificar estructura del repositorio
  - type: Command
    name: "Debug repository structure"
    timeoutInSeconds: 60
    command: |
      echo "=== Repository Structure Debug ==="
      echo "Current directory: $(pwd)"
      echo "Directory contents:"
      ls -la
      echo "MtdrSpring directory:"
      ls -la MtdrSpring/
      echo "Backend directory:"
      ls -la MtdrSpring/backend/
      echo "Frontend directory:"
      ls -la MtdrSpring/frontend/
      echo "Checking for key files:"
      echo "- Backend Dockerfile: $(ls -la MtdrSpring/backend/Dockerfile 2>/dev/null || echo 'NOT FOUND')"
      echo "- Backend pom.xml: $(ls -la MtdrSpring/backend/pom.xml 2>/dev/null || echo 'NOT FOUND')"
      echo "- Frontend Dockerfile: $(ls -la MtdrSpring/frontend/Dockerfile 2>/dev/null || echo 'NOT FOUND')"
      echo "- Frontend package.json: $(ls -la MtdrSpring/frontend/package.json 2>/dev/null || echo 'NOT FOUND')"
      echo "=================================="

  # Paso 2: Establecer tags de imagen usando valores conocidos
  - type: Command
    name: "Setup image tags"
    timeoutInSeconds: 60
    command: |
      echo "=== Estableciendo tags de imagen ==="
      
      # Usar valores hardcodeados que sabemos que funcionan
      echo "Tenancy namespace: ${TENANCY_NAMESPACE}"
      echo "Region: ${CURRENT_REGION}" 
      echo "Docker registry: ${DOCKER_REGISTRY}"
      echo "Build run ID: ${OCI_BUILD_RUN_ID}"
      
      # Crear los tags usando la combinación de valores conocidos + variable dinámica
      export BACKEND_IMAGE_TAG="${DOCKER_REGISTRY}/${TENANCY_NAMESPACE}/${BACKEND_REPO}:${OCI_BUILD_RUN_ID}"
      export FRONTEND_IMAGE_TAG="${DOCKER_REGISTRY}/${TENANCY_NAMESPACE}/${FRONTEND_REPO}:${OCI_BUILD_RUN_ID}"
      
      echo "Backend image tag: ${BACKEND_IMAGE_TAG}"
      echo "Frontend image tag: ${FRONTEND_IMAGE_TAG}"
      
      echo "=== Tags establecidos exitosamente ==="

  # Paso 3: Construir imagen de Backend
  - type: Command
    name: "Build backend image"
    timeoutInSeconds: 1800
    command: |
      echo "=== Starting Backend Image Build ==="
      
      # Recrear el tag usando valores conocidos (para asegurar consistencia)
      export BACKEND_IMAGE_TAG="${DOCKER_REGISTRY}/${TENANCY_NAMESPACE}/${BACKEND_REPO}:${OCI_BUILD_RUN_ID}"
      echo "Backend image tag: ${BACKEND_IMAGE_TAG}"
      
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Verificar que existe el directorio del backend
      if [ ! -d "MtdrSpring/backend" ]; then
        echo "ERROR: Backend directory 'MtdrSpring/backend' not found"
        exit 1
      fi
      
      if [ ! -f "MtdrSpring/backend/Dockerfile" ]; then
        echo "ERROR: Backend Dockerfile not found"
        exit 1
      fi
      
      # Cambiar al directorio del backend para construcción
      cd MtdrSpring/backend
      
      echo "=== Building backend image ==="
      echo "Working directory: $(pwd)"
      echo "Building with tag: ${BACKEND_IMAGE_TAG}"
      
      docker build -t ${BACKEND_IMAGE_TAG} .
      
      # Regresar al directorio raíz
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Verificar que la imagen se construyó correctamente
      echo "Verificando imagen construida:"
      docker images | grep "${TENANCY_NAMESPACE}/${BACKEND_REPO}"
      echo "Backend image built successfully"

  # Paso 4: Construir imagen de Frontend
  - type: Command
    name: "Build frontend image"
    timeoutInSeconds: 1800
    command: |
      echo "=== Starting Frontend Image Build ==="
      
      # Recrear el tag usando valores conocidos (para asegurar consistencia)
      export FRONTEND_IMAGE_TAG="${DOCKER_REGISTRY}/${TENANCY_NAMESPACE}/${FRONTEND_REPO}:${OCI_BUILD_RUN_ID}"
      echo "Frontend image tag: ${FRONTEND_IMAGE_TAG}"
      
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Verificar que existe el directorio del frontend
      if [ ! -d "MtdrSpring/frontend" ]; then
        echo "ERROR: Frontend directory 'MtdrSpring/frontend' not found"
        exit 1
      fi
      
      if [ ! -f "MtdrSpring/frontend/Dockerfile" ]; then
        echo "ERROR: Frontend Dockerfile not found"
        exit 1
      fi
      
      # Cambiar al directorio del frontend para construcción
      cd MtdrSpring/frontend
      
      echo "=== Building frontend image ==="
      echo "Working directory: $(pwd)"
      echo "Building with tag: ${FRONTEND_IMAGE_TAG}"
      
      docker build -t ${FRONTEND_IMAGE_TAG} .
      
      # Regresar al directorio raíz
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Verificar que la imagen se construyó correctamente
      echo "Verificando imagen construida:"
      docker images | grep "${TENANCY_NAMESPACE}/${FRONTEND_REPO}"
      echo "Frontend image built successfully"

  # Paso 5: Hacer login a OCIR
  - type: Command
    name: "Login to OCIR"
    timeoutInSeconds: 300
    command: |
      echo "Logging into OCIR..."
      echo "Docker registry: ${DOCKER_REGISTRY}"
      echo "Tenancy namespace: ${TENANCY_NAMESPACE}"
      
      # Login a OCIR usando valores conocidos
      echo ${OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM} | docker login ${DOCKER_REGISTRY} --username ${TENANCY_NAMESPACE}/oracleidentitycloudservice/${OCI_PRINCIPAL_ID} --password-stdin
      
      echo "Successfully logged into OCIR"

  # Paso 6: Push backend image
  - type: Command
    name: "Push backend image"
    timeoutInSeconds: 1200
    command: |
      echo "Pushing backend image to OCIR..."
      
      # Recrear el tag usando valores conocidos
      export BACKEND_IMAGE_TAG="${DOCKER_REGISTRY}/${TENANCY_NAMESPACE}/${BACKEND_REPO}:${OCI_BUILD_RUN_ID}"
      echo "Backend image tag: ${BACKEND_IMAGE_TAG}"
      
      # Verificar que la imagen existe localmente antes de hacer push
      if docker images | grep -q "${TENANCY_NAMESPACE}/${BACKEND_REPO}"; then
        docker push ${BACKEND_IMAGE_TAG}
        echo "Backend image pushed successfully: ${BACKEND_IMAGE_TAG}"
      else
        echo "ERROR: Backend image not found locally"
        echo "Available images:"
        docker images
        exit 1
      fi

  # Paso 7: Push frontend image
  - type: Command
    name: "Push frontend image"
    timeoutInSeconds: 1200
    command: |
      echo "Pushing frontend image to OCIR..."
      
      # Recrear el tag usando valores conocidos
      export FRONTEND_IMAGE_TAG="${DOCKER_REGISTRY}/${TENANCY_NAMESPACE}/${FRONTEND_REPO}:${OCI_BUILD_RUN_ID}"
      echo "Frontend image tag: ${FRONTEND_IMAGE_TAG}"
      
      # Verificar que la imagen existe localmente antes de hacer push
      if docker images | grep -q "${TENANCY_NAMESPACE}/${FRONTEND_REPO}"; then
        docker push ${FRONTEND_IMAGE_TAG}
        echo "Frontend image pushed successfully: ${FRONTEND_IMAGE_TAG}"
      else
        echo "ERROR: Frontend image not found locally"
        echo "Available images:"
        docker images
        exit 1
      fi

  # Paso 8: Preparar deployment manifest
  - type: Command
    name: "Prepare deployment manifest"
    timeoutInSeconds: 300
    command: |
      echo "Preparing deployment manifest..."
      
      # Verificar que deployment.yaml existe en la raíz del repositorio
      if [ ! -f "deployment.yaml" ]; then
        echo "ERROR: deployment.yaml not found in repository root"
        echo "Please ensure deployment.yaml exists in the root of your repository"
        echo "Available files in root directory:"
        ls -la *.yaml *.yml 2>/dev/null || echo "No YAML files found"
        exit 1
      fi
      
      echo "Found deployment.yaml in repository root"
      
      # Mostrar información sobre el archivo
      echo "Deployment manifest file info:"
      echo "- Size: $(wc -l < deployment.yaml) lines"
      echo "- First few lines:"
      head -10 deployment.yaml
      
      # Copiar deployment.yaml para output
      cp deployment.yaml ${OCI_WORKSPACE_DIR}/deployment.yaml
      
      echo "Deployment manifest prepared successfully and copied to workspace"

  # Paso 9: Establecer variables finales para outputArtifacts
  - type: Command
    name: "Set final variables for artifacts"
    timeoutInSeconds: 60
    command: |
      echo "=== Estableciendo variables finales para outputArtifacts ==="
      
      # Establecer las variables finales que se usarán en outputArtifacts
      export BACKEND_IMAGE_TAG="${DOCKER_REGISTRY}/${TENANCY_NAMESPACE}/${BACKEND_REPO}:${OCI_BUILD_RUN_ID}"
      export FRONTEND_IMAGE_TAG="${DOCKER_REGISTRY}/${TENANCY_NAMESPACE}/${FRONTEND_REPO}:${OCI_BUILD_RUN_ID}"
      
      echo "Variables finales establecidas:"
      echo "BACKEND_IMAGE_TAG: ${BACKEND_IMAGE_TAG}"
      echo "FRONTEND_IMAGE_TAG: ${FRONTEND_IMAGE_TAG}"
      
      # Verificar que las imágenes existen con estos tags exactos
      echo "Verificando imágenes con tags exactos:"
      if docker images | grep -q "${BACKEND_IMAGE_TAG}"; then
        echo "✅ Backend image found: ${BACKEND_IMAGE_TAG}"
      else
        echo "❌ Backend image NOT found with tag: ${BACKEND_IMAGE_TAG}"
        echo "Available backend images:"
        docker images | grep "${TENANCY_NAMESPACE}/${BACKEND_REPO}" || echo "No backend images found"
      fi
      
      if docker images | grep -q "${FRONTEND_IMAGE_TAG}"; then
        echo "✅ Frontend image found: ${FRONTEND_IMAGE_TAG}"
      else
        echo "❌ Frontend image NOT found with tag: ${FRONTEND_IMAGE_TAG}"
        echo "Available frontend images:"
        docker images | grep "${TENANCY_NAMESPACE}/${FRONTEND_REPO}" || echo "No frontend images found"
      fi
      
      echo "=== Variables finales listas para outputArtifacts ==="

outputArtifacts:
  - name: backend_image
    type: DOCKER_IMAGE
    location: mx-queretaro-1.ocir.io/ax6xpbwtbt9g/dashmaster-backend:${OCI_BUILD_RUN_ID}
  - name: frontend_image  
    type: DOCKER_IMAGE
    location: mx-queretaro-1.ocir.io/ax6xpbwtbt9g/dashmaster-frontend:${OCI_BUILD_RUN_ID}
  - name: deployment_artifacts
    type: BINARY
    location: deployment.yaml