version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash

steps:
  # Estrategia simplificada: focus en robustez y confiabilidad
  - type: Command
    name: "Build and deploy with reliable base images"
    timeoutInSeconds: 3600
    command: |
      echo "=== DASHMASTER BUILD - ESTRATEGIA ROBUSTA ==="
      echo "Timestamp: $(date)"
      echo "Build Run ID: ${OCI_BUILD_RUN_ID}"
      
      # Construir tags de imagen con el build ID √∫nico
      BACKEND_FULL_TAG="mx-queretaro-1.ocir.io/ax6xpbwtbt9g/dashmaster-backend:${OCI_BUILD_RUN_ID}"
      FRONTEND_FULL_TAG="mx-queretaro-1.ocir.io/ax6xpbwtbt9g/dashmaster-frontend:${OCI_BUILD_RUN_ID}"
      
      echo "üèóÔ∏è Backend tag: ${BACKEND_FULL_TAG}"
      echo "üèóÔ∏è Frontend tag: ${FRONTEND_FULL_TAG}"
      
      # Navegar al directorio del c√≥digo fuente
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # CONSTRUIR BACKEND
      echo "=== üî® CONSTRUYENDO BACKEND ==="
      cd MtdrSpring/backend
      
      # Build del backend - usa eclipse-temurin que est√° disponible en Docker Hub sin restricciones
      echo "Iniciando build del backend con eclipse-temurin..."
      docker build -t ${BACKEND_FULL_TAG} .
      
      # Verificar que el build fue exitoso antes de continuar
      if [ $? -eq 0 ]; then
        echo "‚úÖ Backend construido exitosamente"
      else
        echo "‚ùå Error construyendo el backend"
        # Mostrar informaci√≥n adicional para debugging
        docker images | head -10
        exit 1
      fi
      
      # Regresar al directorio ra√≠z para el frontend
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # CONSTRUIR FRONTEND
      echo "=== üî® CONSTRUYENDO FRONTEND ==="
      cd MtdrSpring/frontend
      
      # Build del frontend - usa node:18.19-alpine que es estable y confiable
      echo "Iniciando build del frontend con node alpine..."
      docker build -t ${FRONTEND_FULL_TAG} .
      
      # Verificar que el build fue exitoso
      if [ $? -eq 0 ]; then
        echo "‚úÖ Frontend construido exitosamente"
      else
        echo "‚ùå Error construyendo el frontend"
        # Informaci√≥n de debugging
        docker images | head -10
        exit 1
      fi
      
      # Regresar al directorio ra√≠z
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # MOSTRAR IM√ÅGENES CONSTRUIDAS para verificaci√≥n
      echo "=== üì¶ IM√ÅGENES CONSTRUIDAS ==="
      docker images | grep "mx-queretaro-1.ocir.io/ax6xpbwtbt9g"
      
      # AUTENTICACI√ìN CON OCIR - solo necesitamos autenticarnos una vez para push
      echo "=== üîê AUTENTICACI√ìN CON OCIR ==="
      echo "Registry destino: mx-queretaro-1.ocir.io"
      echo "Namespace: ax6xpbwtbt9g"
      
      # Intentar login con formato completo primero
      if echo "{vh]]d:0R#E#pwI4Hnkp" | docker login mx-queretaro-1.ocir.io --username "ax6xpbwtbt9g/a01254673@tec.mx" --password-stdin; then
        echo "‚úÖ Login exitoso con OCIR (formato completo)"
      else
        echo "‚ö†Ô∏è Formato completo fall√≥, intentando formato alternativo..."
        if echo "{vh]]d:0R#E#pwI4Hnkp" | docker login mx-queretaro-1.ocir.io --username "ax6xpbwtbt9g/a01254673" --password-stdin; then
          echo "‚úÖ Login exitoso con OCIR (formato alternativo)"
        else
          echo "‚ùå Error cr√≠tico: no se pudo autenticar con OCIR"
          echo "Esto indica un problema con las credenciales o permisos"
          exit 1
        fi
      fi
      
      # PUSH BACKEND IMAGE
      echo "=== üì§ SUBIENDO IMAGEN BACKEND ==="
      docker push ${BACKEND_FULL_TAG}
      
      if [ $? -eq 0 ]; then
        echo "‚úÖ Backend image subida exitosamente: ${BACKEND_FULL_TAG}"
        
        # Crear y subir tag 'latest' para facilitar deployment
        BACKEND_LATEST_TAG="mx-queretaro-1.ocir.io/ax6xpbwtbt9g/dashmaster-backend:latest"
        docker tag ${BACKEND_FULL_TAG} ${BACKEND_LATEST_TAG}
        docker push ${BACKEND_LATEST_TAG}
        echo "‚úÖ Backend tambi√©n disponible como: ${BACKEND_LATEST_TAG}"
      else
        echo "‚ùå Error cr√≠tico subiendo backend image"
        exit 1
      fi
      
      # PUSH FRONTEND IMAGE
      echo "=== üì§ SUBIENDO IMAGEN FRONTEND ==="
      docker push ${FRONTEND_FULL_TAG}
      
      if [ $? -eq 0 ]; then
        echo "‚úÖ Frontend image subida exitosamente: ${FRONTEND_FULL_TAG}"
        
        # Crear y subir tag 'latest'
        FRONTEND_LATEST_TAG="mx-queretaro-1.ocir.io/ax6xpbwtbt9g/dashmaster-frontend:latest"
        docker tag ${FRONTEND_FULL_TAG} ${FRONTEND_LATEST_TAG}
        docker push ${FRONTEND_LATEST_TAG}
        echo "‚úÖ Frontend tambi√©n disponible como: ${FRONTEND_LATEST_TAG}"
      else
        echo "‚ùå Error cr√≠tico subiendo frontend image"
        exit 1
      fi
      
      # PREPARAR ARTIFACTS PARA DEPLOYMENT
      echo "=== üìã PREPARANDO DEPLOYMENT ==="
      if [ ! -f "deployment.yaml" ]; then
        echo "‚ùå ADVERTENCIA: deployment.yaml no encontrado"
        echo "El deployment manual ser√° necesario"
      else
        cp deployment.yaml ${OCI_WORKSPACE_DIR}/deployment.yaml
        echo "‚úÖ Deployment manifest preparado"
      fi
      
      # RESUMEN FINAL
      echo "=== üéâ BUILD COMPLETADO EXITOSAMENTE ==="
      echo "Backend image: ${BACKEND_FULL_TAG}"
      echo "Frontend image: ${FRONTEND_FULL_TAG}"
      echo "Ambas im√°genes est√°n tambi√©n taggeadas como 'latest'"
      echo "Listo para deployment en Kubernetes"

outputArtifacts:
  - name: backend_image
    type: DOCKER_IMAGE
    location: mx-queretaro-1.ocir.io/ax6xpbwtbt9g/dashmaster-backend:${OCI_BUILD_RUN_ID}
  - name: frontend_image
    type: DOCKER_IMAGE
    location: mx-queretaro-1.ocir.io/ax6xpbwtbt9g/dashmaster-frontend:${OCI_BUILD_RUN_ID}
  - name: deployment_artifacts
    type: BINARY
    location: deployment.yaml