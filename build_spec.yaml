version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash

env:
  variables:
    # Configuración del registro Docker
    DOCKER_REGISTRY: "${OCI_RESOURCE_PRINCIPAL_REGION}.ocir.io"
    NAMESPACE: "${OCI_PRIMARY_SOURCE_DIR}"
    
    # Información del repositorio
    BACKEND_REPO: "dashmaster-backend" 
    FRONTEND_REPO: "dashmaster-frontend"
    
    # Rutas a los Dockerfiles
    BACKEND_DOCKERFILE_PATH: "MtdrSpring/backend/Dockerfile"
    FRONTEND_DOCKERFILE_PATH: "MtdrSpring/frontend/Dockerfile"
    
    # Rutas a los directorios de construcción
    BACKEND_CONTEXT: "MtdrSpring/backend"
    FRONTEND_CONTEXT: "MtdrSpring/frontend"
    
  exportedVariables:
    - BACKEND_IMAGE_TAG
    - FRONTEND_IMAGE_TAG

steps:
  # Paso 1: Obtener información del tenancy namespace
  - type: Command
    name: "Get tenancy namespace"
    timeoutInSeconds: 60
    command: |
      export TENANCY_NAMESPACE=$(oci os ns get --query "data" --raw-output)
      echo "Tenancy namespace: ${TENANCY_NAMESPACE}"

  # Paso 2: Construir imagen de Backend  
  - type: Command
    name: "Build backend image"
    timeoutInSeconds: 1800
    command: |
      echo "Building backend image..."
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Generar tag único para la imagen de backend
      export TENANCY_NAMESPACE=$(oci os ns get --query "data" --raw-output)
      export BACKEND_IMAGE_TAG="${DOCKER_REGISTRY}/${TENANCY_NAMESPACE}/${BACKEND_REPO}:${OCI_BUILD_RUN_ID}"
      echo "Backend image tag: ${BACKEND_IMAGE_TAG}"
      
      # Construir la imagen
      docker build -t ${BACKEND_IMAGE_TAG} -f ${BACKEND_DOCKERFILE_PATH} ${BACKEND_CONTEXT}
      
      # Verificar que la imagen se construyó correctamente
      docker images | grep ${BACKEND_REPO}
      
      echo "Backend image built successfully: ${BACKEND_IMAGE_TAG}"

  # Paso 3: Construir imagen de Frontend
  - type: Command
    name: "Build frontend image"
    timeoutInSeconds: 1800
    command: |
      echo "Building frontend image..."
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      # Generar tag único para la imagen de frontend
      export TENANCY_NAMESPACE=$(oci os ns get --query "data" --raw-output)
      export FRONTEND_IMAGE_TAG="${DOCKER_REGISTRY}/${TENANCY_NAMESPACE}/${FRONTEND_REPO}:${OCI_BUILD_RUN_ID}"
      echo "Frontend image tag: ${FRONTEND_IMAGE_TAG}"
      
      # Crear nginx.conf si no existe
      NGINX_CONF_PATH="${FRONTEND_CONTEXT}/nginx.conf"
      if [ ! -f "${NGINX_CONF_PATH}" ]; then
        echo "Creating nginx.conf..."
        cp MtdrSpring/frontend/nginx.conf "${NGINX_CONF_PATH}"
      fi
      
      # Construir la imagen
      docker build -t ${FRONTEND_IMAGE_TAG} -f ${FRONTEND_DOCKERFILE_PATH} ${FRONTEND_CONTEXT}
      
      # Verificar que la imagen se construyó correctamente
      docker images | grep ${FRONTEND_REPO}
      
      echo "Frontend image built successfully: ${FRONTEND_IMAGE_TAG}"

  # Paso 4: Hacer login a OCIR  
  - type: Command
    name: "Login to OCIR"
    timeoutInSeconds: 300
    command: |
      echo "Logging into OCIR..."
      
      # Login a OCIR usando la región de la instancia
      export TENANCY_NAMESPACE=$(oci os ns get --query "data" --raw-output)
      echo ${OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM} | docker login ${DOCKER_REGISTRY} --username ${TENANCY_NAMESPACE}/oracleidentitycloudservice/${OCI_PRINCIPAL_ID} --password-stdin
      
      echo "Successfully logged into OCIR"

  # Paso 5: Push backend image
  - type: Command
    name: "Push backend image"
    timeoutInSeconds: 1200
    command: |
      echo "Pushing backend image to OCIR..."
      
      # Push de la imagen de backend
      docker push ${BACKEND_IMAGE_TAG}
      
      echo "Backend image pushed successfully: ${BACKEND_IMAGE_TAG}"

  # Paso 6: Push frontend image
  - type: Command
    name: "Push frontend image"
    timeoutInSeconds: 1200
    command: |
      echo "Pushing frontend image to OCIR..."
      
      # Push de la imagen de frontend
      docker push ${FRONTEND_IMAGE_TAG}
      
      echo "Frontend image pushed successfully: ${FRONTEND_IMAGE_TAG}"

  # Paso 7: Preparar deployment manifest
  - type: Command
    name: "Prepare deployment manifest"
    timeoutInSeconds: 300
    command: |
      echo "Preparing deployment manifest..."
      
      # Verificar que deployment.yaml existe
      if [ ! -f "deployment.yaml" ]; then
        echo "Error: deployment.yaml not found in repository root"
        exit 1
      fi
      
      # Copiar deployment.yaml para output
      cp deployment.yaml ${OCI_WORKSPACE_DIR}/deployment.yaml
      
      echo "Deployment manifest prepared successfully"

  # Paso 8: Verificar imágenes en OCIR
  - type: Command
    name: "Verify images in OCIR"
    timeoutInSeconds: 300
    command: |
      echo "Verifying images in OCIR..."
      
      export TENANCY_NAMESPACE=$(oci os ns get --query "data" --raw-output)
      
      # Verificar imagen de backend
      echo "Checking backend repository..."
      oci artifacts container image list --compartment-id ${OCI_PRIMARY_SOURCE_DIR} --repository-name ${BACKEND_REPO} || echo "Backend repository verification failed"
      
      # Verificar imagen de frontend  
      echo "Checking frontend repository..."
      oci artifacts container image list --compartment-id ${OCI_PRIMARY_SOURCE_DIR} --repository-name ${FRONTEND_REPO} || echo "Frontend repository verification failed"
      
      echo "Build process completed successfully!"

outputArtifacts:
  # Definir los artefactos de salida que serán utilizados en el deployment
  - name: backend_image
    type: DOCKER_IMAGE
    location: ${BACKEND_IMAGE_TAG}
    
  - name: frontend_image  
    type: DOCKER_IMAGE
    location: ${FRONTEND_IMAGE_TAG}
    
  - name: deployment_artifacts
    type: BINARY
    location: deployment.yaml